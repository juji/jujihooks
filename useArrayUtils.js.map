{"version":3,"sources":["src/useArrayUtils.js"],"names":["useArrayUtils","array","constructor","Array","Error","state","setState","sum","arr","reduce","a","b","multiply","push","elm","pop","c","p","shift","unshift","splice","apply","arguments","move","oldIndex","newIndex","length","$newIndex","swap","index1","index2","elm1","elm2","reverse","replace"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react'\n\nconst useArrayUtils = ( array = [] ) => {\n\n  if(array.constructor !== Array)\n    throw new Error(\"Invalid 'array' params in 'useArrayUtils'. It should be an array.\")\n\n  const [state, setState] = useState(array)\n  const sum = () => arr.reduce((a,b) => a+b,0)\n  const multiply = () => arr.reduce((a,b) => a*b,1)\n\n  const push = ( elm ) => {\n    setState([...state, elm])\n  }\n\n  const pop = () => {\n    const c = [...state]\n    const p = c.pop()\n    setState(c)\n    return p\n  }\n\n  const shift = () => {\n    const c = [...state]\n    const p = c.shift()\n    setState(c)\n    return p\n  }\n\n  const unshift = ( elm ) => {\n    setState([elm,...state])\n  }\n\n  const splice = function(){\n    const c = [...state]\n    const p = c.splice.apply(c, [...arguments])\n    setState(c)\n    return p\n  }\n\n  const move = ( oldIndex, newIndex ) => {\n    if(\n      oldIndex < 0 ||\n      newIndex < 0 ||\n      newIndex >= state.length ||\n      oldIndex >= state.length\n    ) throw new Error(`Move from ${oldIndex} to ${$newIndex} is not Accepted; length is ${state.length}. Only sane numbers are accepted when moving array elements`)\n\n    const c = [...state]\n    c.splice(\n      newIndex,\n      0,\n      c.splice(oldIndex,1)[0]\n    )\n    setState(c)\n  }\n\n  const swap = (index1, index2) => {\n    const c = [...state]\n    const elm1 = c[index1]\n    const elm2 = c[index2]\n    c[index1] = elm2\n    c[index2] = elm1\n    setState(c)\n  }\n\n  const reverse = () => {\n    const c = [...state]\n    c.reverse()\n    setState(c)\n  }\n\n  return {\n    state,\n    replace: setState,\n    sum, multiply, move,\n    push, pop, shift, unshift,\n    swap, reverse\n  }\n\n}\n\nexport default useArrayUtils\n"],"file":"useArrayUtils.js"}